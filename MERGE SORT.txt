/* 
Name : KEVIN RUFFIN CHERUTHURUTHY
Class : SE COMPUTERS
Roll NO : 8321
Subject – ANALYSIS OF ALGORITHM
*/

MERGE SORT

#include<stdio.h>
#include<stdlib.h>
#define SIZE 100

void merge(int a[],int low, int mid,int high)
{
	int i,j,k=0;
	i=low;
	j=mid+1;
	int c[high];
	while(i<=mid && j<=high)
	{
		if(a[i]<a[j])
		{
			c[k]=a[i];
			i++;
		}
		else
		{
			c[k]=a[j];
			j++;
		}
		k++;
	}
	while(i<=mid)
	{
		c[k]=a[i];
		i++;
		k++;
	}
	while(j<=high)
	{
		c[k]=a[j];
		j++;
		k++;
	}
	for(i=low,k=0;i<=high;i++,k++)
	{
		a[i]=c[k];
	}
}









void mergesort(int a[],int low,int high)
{
	int mid;
	if(low<high)
	{
		mid=(low+high)/2;
		mergesort(a,low,mid);
		mergesort(a,mid+1,high);
		merge(a,low,mid,high);
	}
}

void display(int a[],int n)
{
	int i;
	for(i=0;i<n;i++)
	{
		printf("%d ",a[i]);
	}
	printf("\n");
}

void main()
{
	int a[SIZE],i,j,ele,n;
	printf("Enter number of elements\n");
	scanf("%d",&n);
	printf("Enter elements\n");
	for(i=0;i<n;i++)
	{
		scanf("%d",&a[i]);
	}
	printf("Array before sorting\n");
	display(a,n);
	printf("Array after sorting\n");
	mergesort(a,0,n-1);
	display(a,n);
}     

/*
Enter number of elements
4
Enter elements
11
88
99
77
Array before sorting
11 88 99 77
Array after sorting
11 77 88 99 
*/           







